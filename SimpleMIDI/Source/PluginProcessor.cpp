#include "PluginProcessor.h"
#include "PluginEditor.h"
#include "BinaryData.h" // auto-generated by Projucer

SimpleMIDIAudioProcessor::SimpleMIDIAudioProcessor()
{
    // register WAV/AIFF readers
    formatManager.registerBasicFormats();

    // — add some sampler voices —
    for (int i = 0; i < 8; ++i)
        synth.addVoice(new juce::SamplerVoice());

    auto *wavData = BinaryData::piano_C4_wav;
    auto wavDataSize = BinaryData::piano_C4_wavSize;

    // wrap the raw data in a read-only stream
    std::unique_ptr<juce::AudioFormatReader> reader(
        formatManager.createReaderFor(
            std::make_unique<juce::MemoryInputStream>(wavData, wavDataSize, false)));

    if (reader.get() != nullptr)
    {
        juce::BigInteger allNotes;
        allNotes.setRange(0, 128, true);

        synth.addSound(new juce::SamplerSound(
            "Piano", *reader, allNotes, 60,
            0.0, // attack
            0.1, // release
            10.0 // max sample length
            ));
    }
    else
    {
        DBG("-- Failed to create reader from BinaryData --");
    }
}

SimpleMIDIAudioProcessor::~SimpleMIDIAudioProcessor() = default;

void SimpleMIDIAudioProcessor::prepareToPlay(double sampleRate, int)
{
    synth.setCurrentPlaybackSampleRate(sampleRate);
}

void SimpleMIDIAudioProcessor::releaseResources()
{
}

juce::AudioProcessorEditor *SimpleMIDIAudioProcessor::createEditor()
{
    return new SimpleMIDIAudioProcessorEditor(*this);
    // return new juce::GenericAudioProcessorEditor(*this);
}

void SimpleMIDIAudioProcessor::processBlock(juce::AudioBuffer<float> &buffer,
                                            juce::MidiBuffer &midiMessages)
{
    buffer.clear(); // clear out any existing audio

    // render the synth’s voices into the audio buffer
    synth.renderNextBlock(buffer, midiMessages, 0, buffer.getNumSamples());
}

// This creates new instances of the plugin.
juce::AudioProcessor *JUCE_CALLTYPE createPluginFilter()
{
    return new SimpleMIDIAudioProcessor();
}
